{"version":3,"file":"socket.js","sourceRoot":"","sources":["../../src/socket.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseEvent,\n  ByteArray,\n  ErrorObject,\n  NativeLink,\n  NativePlugin,\n  OnCloseEvent,\n  OnDataEvent,\n  OnErrorEvent,\n  PluginEvents,\n} from './plugin/index';\nimport {\n  OnSocketClose,\n  OnSocketData,\n  OnSocketError,\n  SocketData,\n  SocketOptions,\n} from './types';\nimport {createLogger} from './logger';\nimport {ErrorLevel} from '@spryrocks/logger-plugin';\nimport {SocketConnectionError} from './error';\n\ntype State = 'initial' | 'opening' | 'opened' | 'closing' | 'closed' | 'error';\n\nexport interface ISocket {\n  onData: OnSocketData | undefined;\n\n  onClose: OnSocketClose | undefined;\n\n  onError: OnSocketError | undefined;\n\n  open(host: string, port: number): Promise<void>;\n\n  write(data: SocketData): Promise<void>;\n\n  close(): Promise<void>;\n}\n\nexport class Socket implements ISocket {\n  private readonly logger = createLogger();\n\n  onData: OnSocketData | undefined;\n\n  onClose: OnSocketClose | undefined;\n\n  onError: OnSocketError | undefined;\n\n  private _state: State = 'initial';\n\n  private _link: NativeLink | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor,@typescript-eslint/no-empty-function\n  constructor(_options?: SocketOptions) {\n    this.setupListeners();\n  }\n\n  //region Actions\n  async open(host: string, port: number) {\n    this.logger.debug('Open connection', {host, port});\n    this.checkStateOrThrow('initial', `You can call \"open\" method only once`);\n    this.onOpeningInternal();\n    let close: boolean;\n    try {\n      const {link} = await this.wrapCall(NativePlugin.openConnection({host, port}));\n      close = this.checkState('closing');\n      this.onOpenedInternal(link);\n    } catch (error) {\n      this.onErrorInternal(error);\n      throw error;\n    }\n\n    if (close) {\n      this.closeInternal().catch();\n    }\n  }\n\n  async write(data: SocketData) {\n    this.checkStateOrThrow('opened', `Not supported state: ${this.state}`);\n    return this.wrapCall(\n      NativePlugin.sendData({link: this.getLinkOrThrow(), data: Array.from(data)}),\n    );\n  }\n\n  async close() {\n    if (this.checkState('initial')) {\n      this.logger.debug('Connection closed from initial state');\n      this.onClosedInternal();\n      return;\n    }\n    if (this.checkState('opening')) {\n      this.logger.debug('Connection closing from opening state');\n      this.onClosingInternal();\n      return;\n    }\n\n    await this.closeInternal();\n  }\n  //endregion\n\n  //region Events\n  private onDataEventReceived(event: OnDataEvent) {\n    if (!this.checkEventUuid(event)) return;\n    this.onDataInternal(event.data);\n  }\n\n  private onCloseEventReceived(event: OnCloseEvent) {\n    if (!this.checkEventUuid(event)) return;\n    this.logger.info('onClose event received', {event});\n    this.onClosedInternal();\n  }\n\n  private onErrorEventReceived(event: OnErrorEvent) {\n    if (!this.checkEventUuid(event)) return;\n    this.logger.info('onError event received', {event});\n    this.onErrorInternal(this.createErrorFromObject(event.error));\n  }\n  //endregion\n\n  //region State & Helpers\n  private get state() {\n    return this._state;\n  }\n\n  private set state(newState: State) {\n    const oldState = this._state;\n    this.logger.info(`Set state: \"${newState}\"`, {oldState});\n    this._state = newState;\n  }\n\n  private getLink() {\n    return this._link;\n  }\n\n  private getLinkOrThrow() {\n    if (!this._link) throw new SocketConnectionError('PluginLink is undefined');\n    return this._link;\n  }\n\n  private setLink(link: NativeLink) {\n    this._link = link;\n    this.logger.updateParams({link: link.uuid});\n  }\n\n  private checkState(...states: State[]) {\n    return states.includes(this.state);\n  }\n\n  private checkEventUuid(event: BaseEvent) {\n    return event.socketUuid === this.getLink()?.uuid;\n  }\n\n  private checkStateOrThrow(state: State, errorMessage: string) {\n    if (!this.checkState(state)) {\n      this.logger.error(undefined, errorMessage, {level: ErrorLevel.Low});\n      throw new SocketConnectionError(errorMessage);\n    }\n  }\n  //endregion\n\n  //region Internal\n  private onOpeningInternal() {\n    this.state = 'opening';\n  }\n\n  private onOpenedInternal(link: NativeLink) {\n    this.setLink(link);\n    this.state = 'opened';\n    this.logger.info('Connection opened');\n  }\n\n  private onDataInternal(bytes: ByteArray) {\n    if (!this.checkState('opened')) return;\n    const data = new Uint8Array(bytes);\n    if (this.onData) this.onData(data);\n  }\n\n  private onErrorInternal(error: unknown) {\n    if (this.checkState('error')) return;\n    if (this.checkState('closed')) return;\n    if (this.checkState('closing')) {\n      this.onClosedInternal();\n      return;\n    }\n    this.logger.error(error, undefined, {level: ErrorLevel.Medium});\n    this.state = 'error';\n    if (this.onError) this.onError(error);\n  }\n\n  private onClosingInternal() {\n    this.state = 'closing';\n  }\n\n  private onClosedInternal() {\n    if (this.checkState('closed')) return;\n    if (this.checkState('error')) return;\n    this.state = 'closed';\n    if (this.onClose) this.onClose();\n  }\n\n  private async closeInternal() {\n    if (this.checkState('opened')) {\n      this.logger.debug('Close connection');\n      this.onClosingInternal();\n      await this.wrapCall(NativePlugin.closeConnection({link: this.getLinkOrThrow()}));\n      this.onClosedInternal();\n      this.logger.info('Connection closed');\n      return;\n    }\n\n    this.logger.info(`Cannot close connection from state \"${this.state}\"`);\n  }\n\n  private setupListeners() {\n    NativePlugin.addListener(PluginEvents.OnData, (data) => {\n      this.onDataEventReceived(data as OnDataEvent);\n    });\n    NativePlugin.addListener(PluginEvents.OnClose, (data) => {\n      this.onCloseEventReceived(data as OnCloseEvent);\n    });\n    NativePlugin.addListener(PluginEvents.OnError, (data) => {\n      this.onErrorEventReceived(data as OnErrorEvent);\n    });\n  }\n  //endregion\n\n  private createErrorFromObject(error: ErrorObject): SocketConnectionError {\n    return new SocketConnectionError(error.message);\n  }\n\n  private processErrorCode(code: string): SocketConnectionError | undefined {\n    try {\n      const errorObject: ErrorObject = JSON.parse(code);\n      return this.createErrorFromObject(errorObject);\n    } catch {\n      return undefined;\n    }\n  }\n\n  private processError(error: {\n    errorMessage: string | undefined;\n    code: string | undefined;\n  }): SocketConnectionError {\n    if (error.code) {\n      const processedError = this.processErrorCode(error.code);\n      if (processedError) return processedError;\n    }\n    return new SocketConnectionError(error.errorMessage ?? 'Unknown error');\n  }\n\n  private wrapCall<T>(promise: Promise<T>): Promise<T> {\n    return promise.catch((error) => {\n      throw this.processError(error);\n    });\n  }\n}\n"]}